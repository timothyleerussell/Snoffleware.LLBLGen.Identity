//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Snoffleware.LLBLGen.Identity.Core.Data.HelperClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.FactoryClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Snoffleware.LLBLGen.Identity.Core.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AspNetRole'.<br/><br/></summary>
	[Serializable]
	public partial class AspNetRoleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AspNetRoleClaimEntity> _aspNetRoleClaims;
		private EntityCollection<AspNetUserRoleEntity> _aspNetUserRoles;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AspNetRoleEntityStaticMetaData _staticMetaData = new AspNetRoleEntityStaticMetaData();
		private static AspNetRoleRelations _relationsFactory = new AspNetRoleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AspNetRoleClaims</summary>
			public static readonly string AspNetRoleClaims = "AspNetRoleClaims";
			/// <summary>Member name AspNetUserRoles</summary>
			public static readonly string AspNetUserRoles = "AspNetUserRoles";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AspNetRoleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AspNetRoleEntityStaticMetaData()
			{
				SetEntityCoreInfo("AspNetRoleEntity", InheritanceHierarchyType.None, false, (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetRoleEntity, typeof(AspNetRoleEntity), typeof(AspNetRoleEntityFactory), false);
				AddNavigatorMetaData<AspNetRoleEntity, EntityCollection<AspNetRoleClaimEntity>>("AspNetRoleClaims", a => a._aspNetRoleClaims, (a, b) => a._aspNetRoleClaims = b, a => a.AspNetRoleClaims, () => new AspNetRoleRelations().AspNetRoleClaimEntityUsingRoleId, typeof(AspNetRoleClaimEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetRoleClaimEntity);
				AddNavigatorMetaData<AspNetRoleEntity, EntityCollection<AspNetUserRoleEntity>>("AspNetUserRoles", a => a._aspNetUserRoles, (a, b) => a._aspNetUserRoles = b, a => a.AspNetUserRoles, () => new AspNetRoleRelations().AspNetUserRoleEntityUsingRoleId, typeof(AspNetUserRoleEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AspNetRoleEntity()
		{
		}

		/// <summary> CTor</summary>
		public AspNetRoleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AspNetRoleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AspNetRoleEntity</param>
		public AspNetRoleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetRole which data should be fetched into this AspNetRole object</param>
		public AspNetRoleEntity(System.String id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetRole which data should be fetched into this AspNetRole object</param>
		/// <param name="validator">The custom validator object for this AspNetRoleEntity</param>
		public AspNetRoleEntity(System.String id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AspNetRoleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetRoleClaim' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetRoleClaims() { return CreateRelationInfoForNavigator("AspNetRoleClaims"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetUserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetUserRoles() { return CreateRelationInfoForNavigator("AspNetUserRoles"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AspNetRoleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AspNetRoleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetRoleClaim' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetRoleClaims { get { return _staticMetaData.GetPrefetchPathElement("AspNetRoleClaims", CommonEntityBase.CreateEntityCollection<AspNetRoleClaimEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetUserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetUserRoles { get { return _staticMetaData.GetPrefetchPathElement("AspNetUserRoles", CommonEntityBase.CreateEntityCollection<AspNetUserRoleEntity>()); } }

		/// <summary>The ConcurrencyStamp property of the Entity AspNetRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoles"."ConcurrencyStamp".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ConcurrencyStamp
		{
			get { return (System.String)GetValue((int)AspNetRoleFieldIndex.ConcurrencyStamp, true); }
			set	{ SetValue((int)AspNetRoleFieldIndex.ConcurrencyStamp, value); }
		}

		/// <summary>The Id property of the Entity AspNetRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoles"."Id".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 450.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String Id
		{
			get { return (System.String)GetValue((int)AspNetRoleFieldIndex.Id, true); }
			set	{ SetValue((int)AspNetRoleFieldIndex.Id, value); }
		}

		/// <summary>The Name property of the Entity AspNetRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoles"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)AspNetRoleFieldIndex.Name, true); }
			set	{ SetValue((int)AspNetRoleFieldIndex.Name, value); }
		}

		/// <summary>The NormalizedName property of the Entity AspNetRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoles"."NormalizedName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NormalizedName
		{
			get { return (System.String)GetValue((int)AspNetRoleFieldIndex.NormalizedName, true); }
			set	{ SetValue((int)AspNetRoleFieldIndex.NormalizedName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetRoleClaimEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetRoleClaimEntity))]
		public virtual EntityCollection<AspNetRoleClaimEntity> AspNetRoleClaims { get { return GetOrCreateEntityCollection<AspNetRoleClaimEntity, AspNetRoleClaimEntityFactory>("AspNetRole", true, false, ref _aspNetRoleClaims); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetUserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetUserRoleEntity))]
		public virtual EntityCollection<AspNetUserRoleEntity> AspNetUserRoles { get { return GetOrCreateEntityCollection<AspNetUserRoleEntity, AspNetUserRoleEntityFactory>("AspNetRole", true, false, ref _aspNetUserRoles); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data
{
	public enum AspNetRoleFieldIndex
	{
		///<summary>ConcurrencyStamp. </summary>
		ConcurrencyStamp,
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>NormalizedName. </summary>
		NormalizedName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AspNetRole. </summary>
	public partial class AspNetRoleRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AspNetRoleEntity and AspNetRoleClaimEntity over the 1:n relation they have, using the relation between the fields: AspNetRole.Id - AspNetRoleClaim.RoleId</summary>
		public virtual IEntityRelation AspNetRoleClaimEntityUsingRoleId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetRoleClaims", true, new[] { AspNetRoleFields.Id, AspNetRoleClaimFields.RoleId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AspNetRoleEntity and AspNetUserRoleEntity over the 1:n relation they have, using the relation between the fields: AspNetRole.Id - AspNetUserRole.RoleId</summary>
		public virtual IEntityRelation AspNetUserRoleEntityUsingRoleId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetUserRoles", true, new[] { AspNetRoleFields.Id, AspNetUserRoleFields.RoleId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAspNetRoleRelations
	{
		internal static readonly IEntityRelation AspNetRoleClaimEntityUsingRoleIdStatic = new AspNetRoleRelations().AspNetRoleClaimEntityUsingRoleId;
		internal static readonly IEntityRelation AspNetUserRoleEntityUsingRoleIdStatic = new AspNetRoleRelations().AspNetUserRoleEntityUsingRoleId;

		/// <summary>CTor</summary>
		static StaticAspNetRoleRelations() { }
	}
}
