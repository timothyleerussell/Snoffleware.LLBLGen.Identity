//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Snoffleware.LLBLGen.Identity.Core.Data.HelperClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.FactoryClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Snoffleware.LLBLGen.Identity.Core.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AspNetRoleClaim'.<br/><br/></summary>
	[Serializable]
	public partial class AspNetRoleClaimEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AspNetRoleEntity _aspNetRole;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AspNetRoleClaimEntityStaticMetaData _staticMetaData = new AspNetRoleClaimEntityStaticMetaData();
		private static AspNetRoleClaimRelations _relationsFactory = new AspNetRoleClaimRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AspNetRole</summary>
			public static readonly string AspNetRole = "AspNetRole";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AspNetRoleClaimEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AspNetRoleClaimEntityStaticMetaData()
			{
				SetEntityCoreInfo("AspNetRoleClaimEntity", InheritanceHierarchyType.None, false, (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetRoleClaimEntity, typeof(AspNetRoleClaimEntity), typeof(AspNetRoleClaimEntityFactory), false);
				AddNavigatorMetaData<AspNetRoleClaimEntity, AspNetRoleEntity>("AspNetRole", "AspNetRoleClaims", (a, b) => a._aspNetRole = b, a => a._aspNetRole, (a, b) => a.AspNetRole = b, Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses.StaticAspNetRoleClaimRelations.AspNetRoleEntityUsingRoleIdStatic, ()=>new AspNetRoleClaimRelations().AspNetRoleEntityUsingRoleId, null, new int[] { (int)AspNetRoleClaimFieldIndex.RoleId }, null, true, (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AspNetRoleClaimEntity()
		{
		}

		/// <summary> CTor</summary>
		public AspNetRoleClaimEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AspNetRoleClaimEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AspNetRoleClaimEntity</param>
		public AspNetRoleClaimEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetRoleClaim which data should be fetched into this AspNetRoleClaim object</param>
		public AspNetRoleClaimEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetRoleClaim which data should be fetched into this AspNetRoleClaim object</param>
		/// <param name="validator">The custom validator object for this AspNetRoleClaimEntity</param>
		public AspNetRoleClaimEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AspNetRoleClaimEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AspNetRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetRole() { return CreateRelationInfoForNavigator("AspNetRole"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AspNetRoleClaimEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AspNetRoleClaimRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetRole { get { return _staticMetaData.GetPrefetchPathElement("AspNetRole", CommonEntityBase.CreateEntityCollection<AspNetRoleEntity>()); } }

		/// <summary>The ClaimType property of the Entity AspNetRoleClaim<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoleClaims"."ClaimType".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ClaimType
		{
			get { return (System.String)GetValue((int)AspNetRoleClaimFieldIndex.ClaimType, true); }
			set	{ SetValue((int)AspNetRoleClaimFieldIndex.ClaimType, value); }
		}

		/// <summary>The ClaimValue property of the Entity AspNetRoleClaim<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoleClaims"."ClaimValue".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ClaimValue
		{
			get { return (System.String)GetValue((int)AspNetRoleClaimFieldIndex.ClaimValue, true); }
			set	{ SetValue((int)AspNetRoleClaimFieldIndex.ClaimValue, value); }
		}

		/// <summary>The Id property of the Entity AspNetRoleClaim<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoleClaims"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)AspNetRoleClaimFieldIndex.Id, true); }
			set { SetValue((int)AspNetRoleClaimFieldIndex.Id, value); }		}

		/// <summary>The RoleId property of the Entity AspNetRoleClaim<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetRoleClaims"."RoleId".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 450.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String RoleId
		{
			get { return (System.String)GetValue((int)AspNetRoleClaimFieldIndex.RoleId, true); }
			set	{ SetValue((int)AspNetRoleClaimFieldIndex.RoleId, value); }
		}

		/// <summary>Gets / sets related entity of type 'AspNetRoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual AspNetRoleEntity AspNetRole
		{
			get { return _aspNetRole; }
			set { SetSingleRelatedEntityNavigator(value, "AspNetRole"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data
{
	public enum AspNetRoleClaimFieldIndex
	{
		///<summary>ClaimType. </summary>
		ClaimType,
		///<summary>ClaimValue. </summary>
		ClaimValue,
		///<summary>Id. </summary>
		Id,
		///<summary>RoleId. </summary>
		RoleId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AspNetRoleClaim. </summary>
	public partial class AspNetRoleClaimRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between AspNetRoleClaimEntity and AspNetRoleEntity over the m:1 relation they have, using the relation between the fields: AspNetRoleClaim.RoleId - AspNetRole.Id</summary>
		public virtual IEntityRelation AspNetRoleEntityUsingRoleId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AspNetRole", false, new[] { AspNetRoleFields.Id, AspNetRoleClaimFields.RoleId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAspNetRoleClaimRelations
	{
		internal static readonly IEntityRelation AspNetRoleEntityUsingRoleIdStatic = new AspNetRoleClaimRelations().AspNetRoleEntityUsingRoleId;

		/// <summary>CTor</summary>
		static StaticAspNetRoleClaimRelations() { }
	}
}
