//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Snoffleware.LLBLGen.Identity.Core.Data.HelperClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.FactoryClasses;
using Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Snoffleware.LLBLGen.Identity.Core.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AspNetUser'.<br/><br/></summary>
	[Serializable]
	public partial class AspNetUserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AspNetUserClaimEntity> _aspNetUserClaims;
		private EntityCollection<AspNetUserLoginEntity> _aspNetUserLogins;
		private EntityCollection<AspNetUserRoleEntity> _aspNetUserRoles;
		private EntityCollection<AspNetUserTokenEntity> _aspNetUserTokens;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AspNetUserEntityStaticMetaData _staticMetaData = new AspNetUserEntityStaticMetaData();
		private static AspNetUserRelations _relationsFactory = new AspNetUserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AspNetUserClaims</summary>
			public static readonly string AspNetUserClaims = "AspNetUserClaims";
			/// <summary>Member name AspNetUserLogins</summary>
			public static readonly string AspNetUserLogins = "AspNetUserLogins";
			/// <summary>Member name AspNetUserRoles</summary>
			public static readonly string AspNetUserRoles = "AspNetUserRoles";
			/// <summary>Member name AspNetUserTokens</summary>
			public static readonly string AspNetUserTokens = "AspNetUserTokens";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AspNetUserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AspNetUserEntityStaticMetaData()
			{
				SetEntityCoreInfo("AspNetUserEntity", InheritanceHierarchyType.None, false, (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserEntity, typeof(AspNetUserEntity), typeof(AspNetUserEntityFactory), false);
				AddNavigatorMetaData<AspNetUserEntity, EntityCollection<AspNetUserClaimEntity>>("AspNetUserClaims", a => a._aspNetUserClaims, (a, b) => a._aspNetUserClaims = b, a => a.AspNetUserClaims, () => new AspNetUserRelations().AspNetUserClaimEntityUsingUserId, typeof(AspNetUserClaimEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserClaimEntity);
				AddNavigatorMetaData<AspNetUserEntity, EntityCollection<AspNetUserLoginEntity>>("AspNetUserLogins", a => a._aspNetUserLogins, (a, b) => a._aspNetUserLogins = b, a => a.AspNetUserLogins, () => new AspNetUserRelations().AspNetUserLoginEntityUsingUserId, typeof(AspNetUserLoginEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserLoginEntity);
				AddNavigatorMetaData<AspNetUserEntity, EntityCollection<AspNetUserRoleEntity>>("AspNetUserRoles", a => a._aspNetUserRoles, (a, b) => a._aspNetUserRoles = b, a => a.AspNetUserRoles, () => new AspNetUserRelations().AspNetUserRoleEntityUsingUserId, typeof(AspNetUserRoleEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserRoleEntity);
				AddNavigatorMetaData<AspNetUserEntity, EntityCollection<AspNetUserTokenEntity>>("AspNetUserTokens", a => a._aspNetUserTokens, (a, b) => a._aspNetUserTokens = b, a => a.AspNetUserTokens, () => new AspNetUserRelations().AspNetUserTokenEntityUsingUserId, typeof(AspNetUserTokenEntity), (int)Snoffleware.LLBLGen.Identity.Core.Data.EntityType.AspNetUserTokenEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AspNetUserEntity()
		{
		}

		/// <summary> CTor</summary>
		public AspNetUserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AspNetUserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AspNetUserEntity</param>
		public AspNetUserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetUser which data should be fetched into this AspNetUser object</param>
		public AspNetUserEntity(System.String id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AspNetUser which data should be fetched into this AspNetUser object</param>
		/// <param name="validator">The custom validator object for this AspNetUserEntity</param>
		public AspNetUserEntity(System.String id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AspNetUserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetUserClaim' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetUserClaims() { return CreateRelationInfoForNavigator("AspNetUserClaims"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetUserLogin' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetUserLogins() { return CreateRelationInfoForNavigator("AspNetUserLogins"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetUserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetUserRoles() { return CreateRelationInfoForNavigator("AspNetUserRoles"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AspNetUserToken' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAspNetUserTokens() { return CreateRelationInfoForNavigator("AspNetUserTokens"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AspNetUserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AspNetUserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetUserClaim' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetUserClaims { get { return _staticMetaData.GetPrefetchPathElement("AspNetUserClaims", CommonEntityBase.CreateEntityCollection<AspNetUserClaimEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetUserLogin' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetUserLogins { get { return _staticMetaData.GetPrefetchPathElement("AspNetUserLogins", CommonEntityBase.CreateEntityCollection<AspNetUserLoginEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetUserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetUserRoles { get { return _staticMetaData.GetPrefetchPathElement("AspNetUserRoles", CommonEntityBase.CreateEntityCollection<AspNetUserRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AspNetUserToken' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAspNetUserTokens { get { return _staticMetaData.GetPrefetchPathElement("AspNetUserTokens", CommonEntityBase.CreateEntityCollection<AspNetUserTokenEntity>()); } }

		/// <summary>The AccessFailedCount property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."AccessFailedCount".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AccessFailedCount
		{
			get { return (System.Int32)GetValue((int)AspNetUserFieldIndex.AccessFailedCount, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.AccessFailedCount, value); }
		}

		/// <summary>The ConcurrencyStamp property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."ConcurrencyStamp".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ConcurrencyStamp
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.ConcurrencyStamp, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.ConcurrencyStamp, value); }
		}

		/// <summary>The Email property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."Email".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.Email, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.Email, value); }
		}

		/// <summary>The EmailConfirmed property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."EmailConfirmed".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean EmailConfirmed
		{
			get { return (System.Boolean)GetValue((int)AspNetUserFieldIndex.EmailConfirmed, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.EmailConfirmed, value); }
		}

		/// <summary>The Id property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."Id".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 450.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.String Id
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.Id, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.Id, value); }
		}

		/// <summary>The LockoutEnabled property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."LockoutEnabled".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean LockoutEnabled
		{
			get { return (System.Boolean)GetValue((int)AspNetUserFieldIndex.LockoutEnabled, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.LockoutEnabled, value); }
		}

		/// <summary>The LockoutEnd property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."LockoutEnd".<br/>Table field type characteristics (type, precision, scale, length): DateTimeOffset, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTimeOffset> LockoutEnd
		{
			get { return (Nullable<System.DateTimeOffset>)GetValue((int)AspNetUserFieldIndex.LockoutEnd, false); }
			set	{ SetValue((int)AspNetUserFieldIndex.LockoutEnd, value); }
		}

		/// <summary>The NormalizedEmail property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."NormalizedEmail".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NormalizedEmail
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.NormalizedEmail, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.NormalizedEmail, value); }
		}

		/// <summary>The NormalizedUserName property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."NormalizedUserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String NormalizedUserName
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.NormalizedUserName, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.NormalizedUserName, value); }
		}

		/// <summary>The PasswordHash property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."PasswordHash".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PasswordHash
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.PasswordHash, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.PasswordHash, value); }
		}

		/// <summary>The PhoneNumber property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."PhoneNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String PhoneNumber
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.PhoneNumber, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.PhoneNumber, value); }
		}

		/// <summary>The PhoneNumberConfirmed property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."PhoneNumberConfirmed".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean PhoneNumberConfirmed
		{
			get { return (System.Boolean)GetValue((int)AspNetUserFieldIndex.PhoneNumberConfirmed, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.PhoneNumberConfirmed, value); }
		}

		/// <summary>The ProfileImage property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."ProfileImage".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String ProfileImage
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.ProfileImage, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.ProfileImage, value); }
		}

		/// <summary>The SecurityStamp property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."SecurityStamp".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String SecurityStamp
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.SecurityStamp, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.SecurityStamp, value); }
		}

		/// <summary>The TwoFactorEnabled property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."TwoFactorEnabled".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean TwoFactorEnabled
		{
			get { return (System.Boolean)GetValue((int)AspNetUserFieldIndex.TwoFactorEnabled, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.TwoFactorEnabled, value); }
		}

		/// <summary>The UserName property of the Entity AspNetUser<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AspNetUsers"."UserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 256.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String UserName
		{
			get { return (System.String)GetValue((int)AspNetUserFieldIndex.UserName, true); }
			set	{ SetValue((int)AspNetUserFieldIndex.UserName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetUserClaimEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetUserClaimEntity))]
		public virtual EntityCollection<AspNetUserClaimEntity> AspNetUserClaims { get { return GetOrCreateEntityCollection<AspNetUserClaimEntity, AspNetUserClaimEntityFactory>("AspNetUser", true, false, ref _aspNetUserClaims); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetUserLoginEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetUserLoginEntity))]
		public virtual EntityCollection<AspNetUserLoginEntity> AspNetUserLogins { get { return GetOrCreateEntityCollection<AspNetUserLoginEntity, AspNetUserLoginEntityFactory>("AspNetUser", true, false, ref _aspNetUserLogins); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetUserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetUserRoleEntity))]
		public virtual EntityCollection<AspNetUserRoleEntity> AspNetUserRoles { get { return GetOrCreateEntityCollection<AspNetUserRoleEntity, AspNetUserRoleEntityFactory>("AspNetUser", true, false, ref _aspNetUserRoles); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AspNetUserTokenEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AspNetUserTokenEntity))]
		public virtual EntityCollection<AspNetUserTokenEntity> AspNetUserTokens { get { return GetOrCreateEntityCollection<AspNetUserTokenEntity, AspNetUserTokenEntityFactory>("AspNetUser", true, false, ref _aspNetUserTokens); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data
{
	public enum AspNetUserFieldIndex
	{
		///<summary>AccessFailedCount. </summary>
		AccessFailedCount,
		///<summary>ConcurrencyStamp. </summary>
		ConcurrencyStamp,
		///<summary>Email. </summary>
		Email,
		///<summary>EmailConfirmed. </summary>
		EmailConfirmed,
		///<summary>Id. </summary>
		Id,
		///<summary>LockoutEnabled. </summary>
		LockoutEnabled,
		///<summary>LockoutEnd. </summary>
		LockoutEnd,
		///<summary>NormalizedEmail. </summary>
		NormalizedEmail,
		///<summary>NormalizedUserName. </summary>
		NormalizedUserName,
		///<summary>PasswordHash. </summary>
		PasswordHash,
		///<summary>PhoneNumber. </summary>
		PhoneNumber,
		///<summary>PhoneNumberConfirmed. </summary>
		PhoneNumberConfirmed,
		///<summary>ProfileImage. </summary>
		ProfileImage,
		///<summary>SecurityStamp. </summary>
		SecurityStamp,
		///<summary>TwoFactorEnabled. </summary>
		TwoFactorEnabled,
		///<summary>UserName. </summary>
		UserName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Snoffleware.LLBLGen.Identity.Core.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AspNetUser. </summary>
	public partial class AspNetUserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between AspNetUserEntity and AspNetUserClaimEntity over the 1:n relation they have, using the relation between the fields: AspNetUser.Id - AspNetUserClaim.UserId</summary>
		public virtual IEntityRelation AspNetUserClaimEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetUserClaims", true, new[] { AspNetUserFields.Id, AspNetUserClaimFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AspNetUserEntity and AspNetUserLoginEntity over the 1:n relation they have, using the relation between the fields: AspNetUser.Id - AspNetUserLogin.UserId</summary>
		public virtual IEntityRelation AspNetUserLoginEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetUserLogins", true, new[] { AspNetUserFields.Id, AspNetUserLoginFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AspNetUserEntity and AspNetUserRoleEntity over the 1:n relation they have, using the relation between the fields: AspNetUser.Id - AspNetUserRole.UserId</summary>
		public virtual IEntityRelation AspNetUserRoleEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetUserRoles", true, new[] { AspNetUserFields.Id, AspNetUserRoleFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AspNetUserEntity and AspNetUserTokenEntity over the 1:n relation they have, using the relation between the fields: AspNetUser.Id - AspNetUserToken.UserId</summary>
		public virtual IEntityRelation AspNetUserTokenEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AspNetUserTokens", true, new[] { AspNetUserFields.Id, AspNetUserTokenFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAspNetUserRelations
	{
		internal static readonly IEntityRelation AspNetUserClaimEntityUsingUserIdStatic = new AspNetUserRelations().AspNetUserClaimEntityUsingUserId;
		internal static readonly IEntityRelation AspNetUserLoginEntityUsingUserIdStatic = new AspNetUserRelations().AspNetUserLoginEntityUsingUserId;
		internal static readonly IEntityRelation AspNetUserRoleEntityUsingUserIdStatic = new AspNetUserRelations().AspNetUserRoleEntityUsingUserId;
		internal static readonly IEntityRelation AspNetUserTokenEntityUsingUserIdStatic = new AspNetUserRelations().AspNetUserTokenEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticAspNetUserRelations() { }
	}
}
